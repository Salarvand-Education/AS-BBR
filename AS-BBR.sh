#!/bin/bash

# Define colors for better readability
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Ensure the script is run as root
if [[ $EUID -ne 0 ]]; then
    echo -e "${RED}Please run this script as root.${NC}"
    exit 1
fi

# Function to display the logo and system information
function show_header() {
    clear
    echo -e "\n${BLUE}==========================================${NC}"
    echo -e "${CYAN}   Network Optimizer Script V1.0${NC}"
    echo -e "${BLUE}==========================================${NC}"
    echo -e "${GREEN}Hostname: $(hostname)${NC}"
    echo -e "${GREEN}Kernel Version: $(uname -r)${NC}"
    echo -e "${GREEN}Uptime: $(uptime -p)${NC}"
    echo -e "${BLUE}==========================================${NC}\n"
}

# Function to install required dependencies
function install_dependencies() {
    echo -e "${YELLOW}Checking and installing required dependencies...${NC}"
    if ! apt-get -o Acquire::ForceIPv4=true update &> /dev/null; then
        echo -e "${RED}Failed to update package lists. Check your internet connection.${NC}"
        exit 1
    fi
    
    local missing_deps=()
    for dep in curl jq sudo; do
        if ! command -v "$dep" &> /dev/null; then
            missing_deps+=("$dep")
        fi
    done
    
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        echo -e "${YELLOW}Installing: ${missing_deps[*]}${NC}"
        if ! apt-get -o Acquire::ForceIPv4=true install -y "${missing_deps[@]}" &> /dev/null; then
            echo -e "${RED}Failed to install dependencies. Please check your internet connection.${NC}"
            exit 1
        fi
        echo -e "${GREEN}Dependencies installed successfully.${NC}"
    else
        echo -e "${GREEN}All dependencies are already installed.${NC}"
    fi
}

# Fix /etc/hosts file
function fix_etc_hosts() { 
    local host_path="${1:-/etc/hosts}"
    echo -e "${YELLOW}Starting to fix the hosts file...${NC}"
    
    # Check if file exists and is writable
    if [[ ! -w "$host_path" ]]; then
        echo -e "${RED}Cannot write to $host_path. Check permissions.${NC}"
        return 1
    }
    
    # Create backup with timestamp
    local backup_path="${host_path}.bak.$(date +%Y%m%d_%H%M%S)"
    if ! cp -f "$host_path" "$backup_path"; then
        echo -e "${RED}Failed to create backup at $backup_path${NC}"
        return 1
    fi
    echo -e "${YELLOW}Hosts file backed up as $backup_path${NC}"
    
    local hostname_entry="127.0.1.1 $(hostname)"
    if ! grep -q "$(hostname)" "$host_path"; then
        if echo "$hostname_entry" | sudo tee -a "$host_path" > /dev/null; then
            echo -e "${GREEN}Hostname entry added to hosts file.${NC}"
        else
            echo -e "${RED}Failed to add hostname entry.${NC}"
            return 1
        fi
    else
        echo -e "${GREEN}Hostname entry already present. No changes needed.${NC}"
    fi
}

# Fix DNS with proper error handling
function fix_dns() {
    local dns_path="${1:-/etc/resolv.conf}"
    echo -e "${YELLOW}Starting to update DNS configuration...${NC}"
    
    # Check if file exists and is writable
    if [[ ! -w "$dns_path" ]]; then
        echo -e "${RED}Cannot write to $dns_path. Check permissions.${NC}"
        return 1
    }
    
    # Create backup with timestamp
    local backup_path="${dns_path}.bak.$(date +%Y%m%d_%H%M%S)"
    if ! cp -f "$dns_path" "$backup_path"; then
        echo -e "${RED}Failed to create backup at $backup_path${NC}"
        return 1
    fi
    echo -e "${YELLOW}DNS configuration backed up as $backup_path${NC}"
    
    # Update nameservers with error handling
    {
        echo "# Generated by network-optimizer script on $(date)"
        echo "nameserver 8.8.8.8"
        echo "nameserver 8.8.4.4"
    } | sudo tee "$dns_path" > /dev/null || {
        echo -e "${RED}Failed to update DNS configuration.${NC}"
        cp -f "$backup_path" "$dns_path"
        return 1
    }
    
    echo -e "${GREEN}DNS servers updated successfully.${NC}"
    return 0
}

# Function to fully update and upgrade the server with proper error handling
function full_update_upgrade() {
    local error_occurred=false
    
    echo -e "\n${YELLOW}Starting system update process...${NC}"
    
    # Update package lists
    echo -e "${YELLOW}Updating package lists...${NC}"
    if ! apt-get -o Acquire::ForceIPv4=true update &> /dev/null; then
        echo -e "${RED}Failed to update package lists.${NC}"
        error_occurred=true
    fi
    
    # Only proceed with upgrades if update was successful
    if [[ "$error_occurred" == false ]]; then
        echo -e "${YELLOW}Upgrading installed packages...${NC}"
        if ! apt-get -o Acquire::ForceIPv4=true upgrade -y &> /dev/null; then
            echo -e "${RED}Failed to upgrade packages.${NC}"
            error_occurred=true
        fi
        
        echo -e "${YELLOW}Performing distribution upgrade...${NC}"
        if ! apt-get -o Acquire::ForceIPv4=true dist-upgrade -y &> /dev/null; then
            echo -e "${RED}Failed to perform distribution upgrade.${NC}"
            error_occurred=true
        fi
        
        echo -e "${YELLOW}Cleaning up...${NC}"
        apt-get -o Acquire::ForceIPv4=true autoremove -y &> /dev/null
        apt-get -o Acquire::ForceIPv4=true autoclean &> /dev/null
    fi
    
    if [[ "$error_occurred" == true ]]; then
        echo -e "${RED}Some updates failed. Please check the system logs for details.${NC}"
        return 1
    else
        echo -e "${GREEN}System update and upgrade completed successfully.${NC}"
        return 0
    fi
}

# Function to gather system information with validation
function gather_system_info() {
    local cpu_cores=$(nproc)
    local total_ram=$(free -m | awk '/Mem:/ { print $2 }')
    
    # Validate gathered information
    if [[ ! "$cpu_cores" =~ ^[0-9]+$ ]] || [[ "$cpu_cores" -eq 0 ]]; then
        echo -e "${RED}Failed to detect CPU cores correctly.${NC}"
        cpu_cores=1  # Fallback to conservative value
    fi
    
    if [[ ! "$total_ram" =~ ^[0-9]+$ ]] || [[ "$total_ram" -eq 0 ]]; then
        echo -e "${RED}Failed to detect RAM correctly.${NC}"
        total_ram=1024  # Fallback to conservative value
    fi
    
    echo -e "\n${GREEN}System Information:${NC}"
    echo -e "${GREEN}CPU cores: $cpu_cores${NC}"
    echo -e "${GREEN}Total RAM: ${total_ram}MB${NC}\n"
    
    # Export variables for use in other functions
    export SYSTEM_CPU_CORES=$cpu_cores
    export SYSTEM_TOTAL_RAM=$total_ram
}

# Main menu function with improved error handling
function show_menu() {
    while true; do
        show_header
        echo -e "${CYAN}Available Options:${NC}"
        echo -e "${GREEN}1. Apply Intelligent Optimizations${NC}"
        echo -e "${GREEN}2. Find Best MTU for Server${NC}"
        echo -e "${GREEN}3. Restore Original Settings${NC}"
        echo -e "${GREEN}0. Exit${NC}"
        echo
        read -rp "Enter your choice (0-3): " choice
        
        case $choice in
            1) intelligent_settings ;;
            2) find_best_mtu ;;
            3) restore_original ;;
            0) 
                echo -e "\n${YELLOW}Exiting...${NC}"
                exit 0
                ;;
            *)
                echo -e "\n${RED}Invalid option. Please enter a number between 0 and 3.${NC}"
                sleep 2
                ;;
        esac
    done
}

# Improved error handling for the main execution
trap 'echo -e "\n${RED}Script interrupted. Cleaning up...${NC}"; exit 1' INT TERM

# Check for root privileges
if [[ $EUID -ne 0 ]]; then
    echo -e "${RED}This script must be run as root. Please use sudo.${NC}"
    exit 1
fi

# Main execution with error handling
if ! install_dependencies; then
    echo -e "${RED}Failed to install required dependencies. Exiting.${NC}"
    exit 1
fi

show_menu
